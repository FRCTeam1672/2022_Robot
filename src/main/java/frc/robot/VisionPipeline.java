package frc.robot;

import java.util.ArrayList;
import java.util.List;
import javax.lang.model.util.ElementScanner6;
import org.opencv.core.*;
import org.opencv.imgproc.*;

/**
 * VisionPipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class VisionPipeline {

    // Outputs
    private Mat blurOutput = new Mat();
    private Mat hslThresholdOutput = new Mat();
    private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
    private ArrayList<MatOfPoint> filterContours0Output = new ArrayList<MatOfPoint>();
    private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<MatOfPoint>();
    private ArrayList<MatOfPoint> filterContours1Output = new ArrayList<MatOfPoint>();
    // added to store previous point
    private double[] ppoint;
    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * This is the primary method that runs the entire pipeline and updates the outputs.
     */
    public void process(Mat source0) {
        // Step Blur0:
        Mat blurInput = source0;
        BlurType blurType = BlurType.get("Box Blur");
        double blurRadius = 0.9009009009009009;
        blur(blurInput, blurType, blurRadius, blurOutput);

        // Step HSL_Threshold0:
        Mat hslThresholdInput = blurOutput;
        double[] hslThresholdHue = {35.611510791366904, 100.13651877133107};
        double[] hslThresholdSaturation = {62.18447375930894, 255.0};
        double[] hslThresholdLuminance = {146.76258992805754, 255.0};
        hslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation,
                hslThresholdLuminance, hslThresholdOutput);

        // Step Find_Contours0:
        Mat findContoursInput = hslThresholdOutput;
        boolean findContoursExternalOnly = true;
        findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

        // Step Filter_Contours0:
        ArrayList<MatOfPoint> filterContours0Contours = findContoursOutput;
        double filterContours0MinArea = 13.0;
        double filterContours0MinPerimeter = 2.0;
        double filterContours0MinWidth = 6.0;
        double filterContours0MaxWidth = 64.0;
        double filterContours0MinHeight = 11.0;
        double filterContours0MaxHeight = 69.0;
        double[] filterContours0Solidity = {82.73381294964031, 100.0};
        double filterContours0MaxVertices = 46.0;
        double filterContours0MinVertices = 7.0;
        double filterContours0MinRatio = 1.2;
        double filterContours0MaxRatio = 2.8;
        filterContours(filterContours0Contours, filterContours0MinArea, filterContours0MinPerimeter,
                filterContours0MinWidth, filterContours0MaxWidth, filterContours0MinHeight,
                filterContours0MaxHeight, filterContours0Solidity, filterContours0MaxVertices,
                filterContours0MinVertices, filterContours0MinRatio, filterContours0MaxRatio,
                filterContours0Output);

        // Step Convex_Hulls0:
        ArrayList<MatOfPoint> convexHullsContours = filterContours0Output;
        convexHulls(convexHullsContours, convexHullsOutput);

        // Step Filter_Contours1:
        ArrayList<MatOfPoint> filterContours1Contours = convexHullsOutput;
        double filterContours1MinArea = 0;
        double filterContours1MinPerimeter = 3.0;
        double filterContours1MinWidth = 23.0;
        double filterContours1MaxWidth = 100.0;
        double filterContours1MinHeight = 11.0;
        double filterContours1MaxHeight = 1000;
        double[] filterContours1Solidity = {100.0, 100.0};
        double filterContours1MaxVertices = 20.0;
        double filterContours1MinVertices = 8.0;
        double filterContours1MinRatio = 1.22;
        double filterContours1MaxRatio = 2.5;
        filterContours(filterContours1Contours, filterContours1MinArea, filterContours1MinPerimeter,
                filterContours1MinWidth, filterContours1MaxWidth, filterContours1MinHeight,
                filterContours1MaxHeight, filterContours1Solidity, filterContours1MaxVertices,
                filterContours1MinVertices, filterContours1MinRatio, filterContours1MaxRatio,
                filterContours1Output);

    }

    /**
     * This method is a generated getter for the output of a Blur.
     * 
     * @return Mat output from Blur.
     */
    public Mat blurOutput() {
        return blurOutput;
    }

    /**
     * This method is a generated getter for the output of a HSL_Threshold.
     * 
     * @return Mat output from HSL_Threshold.
     */
    public Mat hslThresholdOutput() {
        return hslThresholdOutput;
    }

    /**
     * This method is a generated getter for the output of a Find_Contours.
     * 
     * @return ArrayList<MatOfPoint> output from Find_Contours.
     */
    public ArrayList<MatOfPoint> findContoursOutput() {
        return findContoursOutput;
    }

    /**
     * This method is a generated getter for the output of a Filter_Contours.
     * 
     * @return ArrayList<MatOfPoint> output from Filter_Contours.
     */
    public ArrayList<MatOfPoint> filterContours0Output() {
        return filterContours0Output;
    }

    /**
     * This method is a generated getter for the output of a Convex_Hulls.
     * 
     * @return ArrayList<MatOfPoint> output from Convex_Hulls.
     */
    public ArrayList<MatOfPoint> convexHullsOutput() {
        return convexHullsOutput;
    }

    /**
     * This method is a generated getter for the output of a Filter_Contours.
     * 
     * @return ArrayList<MatOfPoint> output from Filter_Contours.
     */
    public ArrayList<MatOfPoint> filterContours1Output() {
        return filterContours1Output;
    }


    /**
     * An indication of which type of filter to use for a blur. Choices are BOX, GAUSSIAN, MEDIAN,
     * and BILATERAL
     */
    enum BlurType {
        BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"), BILATERAL(
                "Bilateral Filter");

        private final String label;

        BlurType(String label) {
            this.label = label;
        }

        public static BlurType get(String type) {
            if (BILATERAL.label.equals(type)) {
                return BILATERAL;
            } else if (GAUSSIAN.label.equals(type)) {
                return GAUSSIAN;
            } else if (MEDIAN.label.equals(type)) {
                return MEDIAN;
            } else {
                return BOX;
            }
        }

        @Override
        public String toString() {
            return this.label;
        }
    }

    /**
     * Softens an image using one of several filters.
     * 
     * @param input The image on which to perform the blur.
     * @param type The blurType to perform.
     * @param doubleRadius The radius for the blur.
     * @param output The image in which to store the output.
     */
    private void blur(Mat input, BlurType type, double doubleRadius, Mat output) {
        int radius = (int) (doubleRadius + 0.5);
        int kernelSize;
        switch (type) {
            case BOX:
                kernelSize = 2 * radius + 1;
                Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
                break;
            case GAUSSIAN:
                kernelSize = 6 * radius + 1;
                Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
                break;
            case MEDIAN:
                kernelSize = 2 * radius + 1;
                Imgproc.medianBlur(input, output, kernelSize);
                break;
            case BILATERAL:
                Imgproc.bilateralFilter(input, output, -1, radius, radius);
                break;
        }
    }

    /**
     * Segment an image based on hue, saturation, and luminance ranges.
     *
     * @param input The image on which to perform the HSL threshold.
     * @param hue The min and max hue
     * @param sat The min and max saturation
     * @param lum The min and max luminance
     * @param output The image in which to store the output.
     */
    private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum, Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
        Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]), new Scalar(hue[1], lum[1], sat[1]),
                out);
    }

    /**
     * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
     * 
     * @param input The image on which to perform the Distance Transform.
     * @param type The Transform.
     * @param maskSize the size of the mask.
     * @param output The image in which to store the output.
     */
    private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
        Mat hierarchy = new Mat();
        contours.clear();
        int mode;
        if (externalOnly) {
            mode = Imgproc.RETR_EXTERNAL;
        } else {
            mode = Imgproc.RETR_LIST;
        }
        int method = Imgproc.CHAIN_APPROX_SIMPLE;
        Imgproc.findContours(input, contours, hierarchy, mode, method);
    }

    /**
     * Compute the convex hulls of contours.
     * 
     * @param inputContours The contours on which to perform the operation.
     * @param outputContours The contours where the output will be stored.
     */
    private void convexHulls(List<MatOfPoint> inputContours, ArrayList<MatOfPoint> outputContours) {
        final MatOfInt hull = new MatOfInt();
        outputContours.clear();
        for (int i = 0; i < inputContours.size(); i++) {
            final MatOfPoint contour = inputContours.get(i);
            final MatOfPoint mopHull = new MatOfPoint();
            Imgproc.convexHull(contour, hull);
            mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
            for (int j = 0; j < hull.size().height; j++) {
                int index = (int) hull.get(j, 0)[0];
                double[] point = new double[] {contour.get(index, 0)[0], contour.get(index, 0)[1]};
                mopHull.put(j, 0, point);
            }
            outputContours.add(mopHull);
        }
    }


    /**
     * Filters out contours that do not meet certain criteria.
     * 
     * @param inputContours is the input list of contours
     * @param output is the the output list of contours
     * @param minArea is the minimum area of a contour that will be kept
     * @param minPerimeter is the minimum perimeter of a contour that will be kept
     * @param minWidth minimum width of a contour
     * @param maxWidth maximum width
     * @param minHeight minimum height
     * @param maxHeight maximimum height
     * @param Solidity the minimum and maximum solidity of a contour
     * @param minVertexCount minimum vertex Count of the contours
     * @param maxVertexCount maximum vertex Count
     * @param minRatio minimum ratio of width to height
     * @param maxRatio maximum ratio of width to height
     */
    private void filterContours(List<MatOfPoint> inputContours, double minArea, double minPerimeter,
            double minWidth, double maxWidth, double minHeight, double maxHeight, double[] solidity,
            double maxVertexCount, double minVertexCount, double minRatio, double maxRatio,
            List<MatOfPoint> output) {
        final MatOfInt hull = new MatOfInt();
        output.clear();
        // operation
        for (int i = 0; i < inputContours.size(); i++) {
            final MatOfPoint contour = inputContours.get(i);
            final Rect bb = Imgproc.boundingRect(contour);
            if (bb.width < minWidth || bb.width > maxWidth)
                continue;
            if (bb.height < minHeight || bb.height > maxHeight)
                continue;
            final double area = Imgproc.contourArea(contour);
            if (area < minArea)
                continue;
            if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
                continue;
            Imgproc.convexHull(contour, hull);
            MatOfPoint mopHull = new MatOfPoint();
            mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
            for (int j = 0; j < hull.size().height; j++) {
                int index = (int) hull.get(j, 0)[0];
                double[] point = new double[] {contour.get(index, 0)[0], contour.get(index, 0)[1]};
                // if(ppoint==null)
                // {
                // ppoint = point;
                // }
                // else if(point==null)
                // {
                // ppoint=null;
                // }
                // else
                // if((point[0]*.95<=ppoint[0]||point[0]*1.05>=ppoint[0])&&((point[1]*.95<=ppoint[1]||point[1]*1.05>=ppoint[1]))
                // {
                // ppoint=point;
                // }
                // attempt to account for changing position of tape to be tried and reviewed on 2/23

                // changed from point to ppoint
                mopHull.put(j, 0, point);
            }
            final double solid = 100 * area / Imgproc.contourArea(mopHull);
            if (solid < solidity[0] || solid > solidity[1])
                continue;
            if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)
                continue;
            final double ratio = bb.width / (double) bb.height;
            if (ratio < minRatio || ratio > maxRatio)
                continue;
            output.add(contour);
        }
    }
}
